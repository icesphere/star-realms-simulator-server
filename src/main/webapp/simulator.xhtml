<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:p="http://primefaces.org/ui"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:pt="http://xmlns.jcp.org/jsf/passthrough">

<ui:composition template="/templates/commonLayout.xhtml">
    <ui:define name="content">
        <h:form id="simulatorForm">

            <p:remoteCommand name="runSimulation" actionListener="#{simulatorView.runSimulation}" process="simulatorForm" update="submitSection results"/>
            <p:remoteCommand name="runBuySimulation" actionListener="#{simulatorView.runBuySimulation()}" process="simulatorForm" update="submitSection results"/>

            <h:panelGroup id="simulatorPage" layout="block" styleClass="simulatorPage">

                <h2>Star Realms Simulator</h2>

                <h:panelGroup id="instructions" layout="block" styleClass="bigTopMargin">
                    <h3>Instructions</h3>
                    <div class="bigTopMargin">
                        Enter the current game state, and then click submit to either simulate the winner, or to simulate win percentage for buys.
                        <br/><br/>
                        When simulating the best card to buy, the trade row cannot be left blank, and you cannot have the first player be random.
                        <br/><br/>
                        Shuffles are how many times the deck has been shuffled.  This is important for several of the bots in making decisions, especially in which cards to buy.
                        <br/><br/>
                        To enter cards just enter a list of card names separated by commas. Example: Scout, Scout, Scout, Viper, Viper, Explorer, Blob World, Blob Fighter, Battle Station, Trade Escort, Trade Bot, Trade Bot, Missile Bot
                        <br/><br/>
                        The starter cards and explorers can also be abbreviated to their first letter and capitalization and spaces are not required so the above example could also be: s, s, s, v, v, e, blobworld, blobfighter, battlestation, tradeescort, tradebot, tradebot, missilebot
                        <br/><br/>
                        Several common terms (battle, blob, defense, federation, fighter, imperial, mech, ship, station, trade/trading, world) can also be abbreviated to one letter, so the above example could also be: s, s, s, v, v, e, bw, bf, bs, tescort, tb, tb, missileb
                        <br/><br/>
                        You can also use multipliers, so the above example could also be: s*3, v*2, e, bw, bf, bs, tescort, tb*2, missileb
                        <br/><br/>
                        Sometimes it is hard to remember what can be abbreviated, or what the abbreviations stand for, so you can also use the first three letters of each word, so the above could also be: sco*3, vip*2, exp, blowor, blofig, batsta, traesc, trabot*2, misbot
                        <br/><br/>
                        If the trade row is left blank it will randomly draw 5 cards for the trade row.
                        <br/><br/>
                        If hand, deck, and discard for a player are left blank it will use starter cards and randomly draw a hand from the starter cards.
                        <br/><br/>
                        If a player's hand is left blank, but there are cards in the deck or discard, then it will randomly draw a hand.
                        <br/><br/>
                        Bot descriptions:
                        <br/>
                        Attack Bot - Favors attack
                        <br/>
                        Defense Bot - Favors lifegain/bases
                        <br/>
                        End Game Bot - Does not buy any cards and always scraps for benefit
                        <br/>
                        ExpensiveBot - Always buys the most expensive card
                        <br/>
                        HareBot - Combination of attack and scrap
                        <br/>
                        RandomBot - All cards are considered the same value, so it just buys random cards
                        <br/>
                        TortoiseBot - Combination of defense and scrap
                        <br/>
                        VelocityBot - Favors scrap and velocity
                    </div>
                </h:panelGroup>

                <h:panelGroup id="gameState" layout="block">
                    <div class="bigTopMargin">
                        <h3>Game Info</h3>

                        <h:panelGrid styleClass="bigTopMargin" columns="2" columnClasses="boldText smallRightPadding tinyBottomPadding alignTop, tinyBottomPadding alignTop">

                            <p:outputLabel value="Turn: "/>
                            <p:inputText style="width: 50px;" value="#{simulatorView.gameState.turn}" pt:type="number"/>

                            <p:outputLabel value="Is it your turn? "/>
                            <p:selectOneRadio value="#{simulatorView.gameState.currentPlayer}" styleClass="radioSpacing">
                                <f:selectItem itemLabel="Yes" itemValue="Y"/>
                                <f:selectItem itemLabel="No" itemValue="N"/>
                                <f:selectItem itemLabel="Random" itemValue="R"/>
                            </p:selectOneRadio>

                            <p:outputLabel value="Include Base Set? "/>
                            <p:selectOneRadio value="#{simulatorView.gameState.includeBaseSet}" styleClass="radioSpacing">
                                <f:selectItem itemLabel="Yes" itemValue="Y"/>
                                <f:selectItem itemLabel="No" itemValue="N"/>
                                <f:selectItem itemLabel="Random" itemValue="R"/>
                            </p:selectOneRadio>

                            <p:outputLabel value="Include Colony Wars? "/>
                            <p:selectOneRadio value="#{simulatorView.gameState.includeColonyWars}" styleClass="radioSpacing">
                                <f:selectItem itemLabel="Yes" itemValue="Y"/>
                                <f:selectItem itemLabel="No" itemValue="N"/>
                                <f:selectItem itemLabel="Random" itemValue="R"/>
                            </p:selectOneRadio>

                            <p:outputLabel value="Include Year One Promos? "/>
                            <p:selectOneRadio value="#{simulatorView.gameState.includeYearOnePromos}" styleClass="radioSpacing">
                                <f:selectItem itemLabel="Yes" itemValue="Y"/>
                                <f:selectItem itemLabel="No" itemValue="N"/>
                                <f:selectItem itemLabel="Random" itemValue="R"/>
                            </p:selectOneRadio>

                            <p:outputLabel value="Include Crisis - Bases &amp; Battleships? "/>
                            <p:selectOneRadio value="#{simulatorView.gameState.includeCrisisBasesAndBattleships}" styleClass="radioSpacing">
                                <f:selectItem itemLabel="Yes" itemValue="Y"/>
                                <f:selectItem itemLabel="No" itemValue="N"/>
                                <f:selectItem itemLabel="Random" itemValue="R"/>
                            </p:selectOneRadio>

                            <p:outputLabel value="Include Crisis - Events? "/>
                            <p:selectOneRadio value="#{simulatorView.gameState.includeCrisisEvents}" styleClass="radioSpacing">
                                <f:selectItem itemLabel="Yes" itemValue="Y"/>
                                <f:selectItem itemLabel="No" itemValue="N"/>
                                <f:selectItem itemLabel="Random" itemValue="R"/>
                            </p:selectOneRadio>

                            <p:outputLabel value="Include Crisis - Fleets &amp; Fortresses? "/>
                            <p:selectOneRadio value="#{simulatorView.gameState.includeCrisisFleetsAndFortresses}" styleClass="radioSpacing">
                                <f:selectItem itemLabel="Yes" itemValue="Y"/>
                                <f:selectItem itemLabel="No" itemValue="N"/>
                                <f:selectItem itemLabel="Random" itemValue="R"/>
                            </p:selectOneRadio>

                            <p:outputLabel value="Include Crisis - Heroes? "/>
                            <p:selectOneRadio value="#{simulatorView.gameState.includeCrisisHeroes}" styleClass="radioSpacing">
                                <f:selectItem itemLabel="Yes" itemValue="Y"/>
                                <f:selectItem itemLabel="No" itemValue="N"/>
                                <f:selectItem itemLabel="Random" itemValue="R"/>
                            </p:selectOneRadio>

                            <p:outputLabel value="Include Gambits? "/>
                            <p:selectOneRadio value="#{simulatorView.gameState.includeGambits}" styleClass="radioSpacing">
                                <f:selectItem itemLabel="Yes" itemValue="Y"/>
                                <f:selectItem itemLabel="No" itemValue="N"/>
                                <f:selectItem itemLabel="Random" itemValue="R"/>
                            </p:selectOneRadio>

                            <p:outputLabel value="Trade row: "/>
                            <p:inputTextarea cols="40" rows="3" value="#{simulatorView.gameState.tradeRow}"/>

                        </h:panelGrid>

                    </div>

                    <div class="bigTopMargin">
                        <h3>Your Info</h3>

                        <h:panelGrid styleClass="bigTopMargin" columns="2" columnClasses="boldText smallRightPadding tinyBottomPadding alignTop, tinyBottomPadding alignTop">

                            <p:outputLabel value="Bot Name: "/>
                            <p:selectOneMenu value="#{simulatorView.gameState.bot}">
                                <f:selectItem itemLabel="Attack Bot" itemValue="AttackBot"/>
                                <f:selectItem itemLabel="Defense Bot" itemValue="DefenseAndBaseBot"/>
                                <f:selectItem itemLabel="End Game Bot" itemValue="EndGameBot"/>
                                <f:selectItem itemLabel="Expensive Bot" itemValue="ExpensiveBot"/>
                                <f:selectItem itemLabel="Hare Bot" itemValue="HareBot"/>
                                <f:selectItem itemLabel="Random Bot" itemValue="RandomBot"/>
                                <f:selectItem itemLabel="Tortoise Bot" itemValue="TortoiseBot"/>
                                <f:selectItem itemLabel="Velocity Bot" itemValue="VelocityBot"/>
                            </p:selectOneMenu>

                            <p:outputLabel value="Authority: "/>
                            <p:inputText style="width: 50px;" value="#{simulatorView.gameState.authority}" pt:type="number"/>

                            <p:outputLabel value="Shuffles:"/>
                            <p:inputText style="width: 50px;" value="#{simulatorView.gameState.shuffles}" pt:type="number"/>

                            <p:outputLabel value="Hand: "/>
                            <p:inputTextarea cols="40" rows="3" value="#{simulatorView.gameState.hand}"/>

                            <p:outputLabel value="Deck: "/>
                            <p:inputTextarea cols="40" rows="3" value="#{simulatorView.gameState.deck}"/>

                            <p:outputLabel value="Discard: "/>
                            <p:inputTextarea cols="40" rows="3" value="#{simulatorView.gameState.discard}"/>

                            <p:outputLabel value="Bases in Play: "/>
                            <p:inputTextarea cols="40" rows="3" value="#{simulatorView.gameState.basesInPlay}"/>

                            <p:outputLabel value="Heroes in Play: "/>
                            <p:inputTextarea cols="40" rows="3" value="#{simulatorView.gameState.heroesInPlay}"/>

                            <p:outputLabel value="Gambits: "/>
                            <p:inputTextarea cols="40" rows="3" value="#{simulatorView.gameState.gambits}"/>

                        </h:panelGrid>

                    </div>

                    <div class="bigTopMargin" style="padding-bottom: 30px;">
                        <h3>Opponent Info</h3>

                        <h:panelGrid styleClass="bigTopMargin" columns="2" columnClasses="boldText smallRightPadding tinyBottomPadding alignTop, tinyBottomPadding alignTop">

                            <p:outputLabel value="Bot Name: "/>
                            <p:selectOneMenu value="#{simulatorView.gameState.opponentBot}">
                                <f:selectItem itemLabel="Attack Bot" itemValue="AttackBot"/>
                                <f:selectItem itemLabel="Defense Bot" itemValue="DefenseAndBaseBot"/>
                                <f:selectItem itemLabel="End Game Bot" itemValue="EndGameBot"/>
                                <f:selectItem itemLabel="Expensive Bot" itemValue="ExpensiveBot"/>
                                <f:selectItem itemLabel="Hare Bot" itemValue="HareBot"/>
                                <f:selectItem itemLabel="Random Bot" itemValue="RandomBot"/>
                                <f:selectItem itemLabel="Tortoise Bot" itemValue="TortoiseBot"/>
                                <f:selectItem itemLabel="Velocity Bot" itemValue="VelocityBot"/>
                            </p:selectOneMenu>

                            <p:outputLabel value="Authority: "/>
                            <p:inputText style="width: 50px;" value="#{simulatorView.gameState.opponentAuthority}" pt:type="number"/>

                            <p:outputLabel value="Shuffles:"/>
                            <p:inputText style="width: 50px;" value="#{simulatorView.gameState.opponentShuffles}" pt:type="number"/>

                            <p:outputLabel value="Hand and Deck: "/>
                            <p:inputTextarea cols="40" rows="3" value="#{simulatorView.gameState.opponentHandAndDeck}"/>

                            <p:outputLabel value="Discard: "/>
                            <p:inputTextarea cols="40" rows="3" value="#{simulatorView.gameState.opponentDiscard}"/>

                            <p:outputLabel value="Bases in Play: "/>
                            <p:inputTextarea cols="40" rows="3" value="#{simulatorView.gameState.opponentBasesInPlay}"/>

                            <p:outputLabel value="Heroes in Play: "/>
                            <p:inputTextarea cols="40" rows="3" value="#{simulatorView.gameState.opponentHeroesInPlay}"/>

                            <p:outputLabel value="Gambits: "/>
                            <p:inputTextarea cols="40" rows="3" value="#{simulatorView.gameState.opponentGambits}"/>

                        </h:panelGrid>

                    </div>

                </h:panelGroup>

                <h:panelGroup id="results" layout="block" style="padding-bottom: 20px;">
                    <h:panelGroup layout="block" rendered="#{simulatorView.showResults}" styleClass="bigTopMargin">

                        <h:panelGroup layout="block" rendered="#{simulatorView.loadingResults}">
                            <h:graphicImage library="images" name="loadingSmall.gif"/>
                        </h:panelGroup>

                        <h:panelGroup layout="block" rendered="#{!simulatorView.loadingResults}">

                            <h:panelGroup layout="block" rendered="#{simulatorView.showErrors}">

                                <h2>Errors</h2>

                                <h:dataTable style="color: #cc0000" value="#{simulatorView.errorMessages}" var="errorMessage">
                                    <h:column>
                                        <h:outputText value="#{errorMessage}"/>
                                    </h:column>
                                </h:dataTable>

                            </h:panelGroup>

                            <h:panelGroup layout="block" rendered="#{!simulatorView.showErrors}">

                                <h2>Results</h2>

                                <h:panelGroup layout="block" styleClass="bigTopMargin" rendered="#{simulatorView.simulatingBuys}">

                                    <p:dataTable value="#{simulatorView.buyCardResults.keySet()}" var="card">

                                        <p:column headerText="Card">
                                            <h:outputText value="#{card.name}"/>
                                        </p:column>

                                        <p:column headerText="able to acquire this turn">
                                            <h:outputText value="#{simulatorView.buyCardResults[card].ableToBuyFirstTurnPercentage}">
                                                <f:convertNumber pattern="##0.00"/>
                                            </h:outputText>
                                            <h:outputText value="%"/>
                                        </p:column>

                                        <p:column headerText="win % when acquired this turn">
                                            <h:outputText value="N/A" rendered="#{simulatorView.buyCardResults[card].winPercentage eq 0}"/>
                                            <h:panelGroup rendered="#{simulatorView.buyCardResults[card].winPercentage gt 0}">
                                                <h:outputText value="#{simulatorView.buyCardResults[card].winPercentage}">
                                                    <f:convertNumber pattern="##0.00"/>
                                                </h:outputText>
                                                <h:outputText value="%"/>
                                            </h:panelGroup>
                                        </p:column>

                                    </p:dataTable>

                                </h:panelGroup>

                                <h:panelGroup layout="block" styleClass="bigTopMargin" rendered="#{!simulatorView.simulatingBuys}">

                                    <h:panelGrid columns="2" columnClasses="boldText smallRightPadding tinyBottomPadding alignTop, tinyBottomPadding alignTop">

                                        <p:outputLabel value="Win Percentage: "/>
                                        <h:panelGroup>
                                            <h:outputText value="#{simulatorView.results.winPercentage}">
                                                <f:convertNumber pattern="##0.00"/>
                                            </h:outputText>
                                            <h:outputText value="%"/>
                                        </h:panelGroup>

                                        <p:outputLabel value="Avg # Turns: "/>
                                        <h:outputText value="#{simulatorView.results.averageNumTurns}">
                                            <f:convertNumber pattern="##0.00"/>
                                        </h:outputText>

                                    </h:panelGrid>

                                    <div style="padding-top: 20px;">
                                        <p:chart type="line" model="#{simulatorView.authorityChart}"/>
                                    </div>

                                    <h:panelGroup layout="block" id="winGameLogSection" style="padding-top: 20px;" rendered="#{!empty simulatorView.results.winGameLog}">
                                        <h:panelGroup rendered="#{!simulatorView.showWinGameLog}">
                                            <p:commandLink value="Show Win Game Log" actionListener="#{simulatorView.setShowWinGameLog(true)}" process="@this" update="winGameLogSection"/>
                                        </h:panelGroup>

                                        <h:panelGroup rendered="#{simulatorView.showWinGameLog}">
                                            <p:commandLink value="Hide Win Game Log" actionListener="#{simulatorView.setShowWinGameLog(false)}" process="@this" update="winGameLogSection"/>
                                        </h:panelGroup>

                                        <h:panelGroup layout="block" style="padding-top: 10px;" rendered="#{simulatorView.showWinGameLog}">
                                            <h:outputText value="#{simulatorView.results.winGameLog}" escape="false"/>
                                        </h:panelGroup>
                                    </h:panelGroup>

                                    <h:panelGroup layout="block" id="lossGameLogSection" style="padding-top: 20px;" rendered="#{!empty simulatorView.results.lossGameLog}">
                                        <h:panelGroup rendered="#{!simulatorView.showLossGameLog}">
                                            <p:commandLink value="Show Loss Game Log" actionListener="#{simulatorView.setShowLossGameLog(true)}" process="@this" update="lossGameLogSection"/>
                                        </h:panelGroup>

                                        <h:panelGroup rendered="#{simulatorView.showLossGameLog}">
                                            <p:commandLink value="Hide Loss Game Log" actionListener="#{simulatorView.setShowLossGameLog(false)}" process="@this" update="lossGameLogSection"/>
                                        </h:panelGroup>

                                        <h:panelGroup layout="block" style="padding-top: 10px;" rendered="#{simulatorView.showLossGameLog}">
                                            <h:outputText value="#{simulatorView.results.lossGameLog}" escape="false"/>
                                        </h:panelGroup>
                                    </h:panelGroup>

                                </h:panelGroup>

                            </h:panelGroup>

                        </h:panelGroup>

                    </h:panelGroup>
                </h:panelGroup>

                <h:panelGroup id="submitSection" layout="block">

                    <h:panelGroup rendered="#{!simulatorView.loadingResults}">

                        <hr/>

                        <h:panelGroup layout="block" id="submitSimulationSection" style="padding: 20px 0;">
                            <h3>Simulate Winner</h3>

                            <h:panelGrid style="margin-top: 15px;" columns="2" columnClasses="boldText smallRightPadding tinyBottomPadding alignTop, tinyBottomPadding alignTop">

                                <h:outputText value="Number of times to simulate: "/>
                                <p:selectOneMenu value="#{simulatorView.timesToSimulate}">
                                    <f:selectItem itemLabel="1,000" itemValue="1000"/>
                                    <f:selectItem itemLabel="2,000" itemValue="2000"/>
                                    <f:selectItem itemLabel="5,000" itemValue="5000"/>
                                    <f:selectItem itemLabel="10,000" itemValue="10000"/>
                                </p:selectOneMenu>

                            </h:panelGrid>

                            <p:commandButton process="submitSimulationSection" update="submitSection results" onsuccess="runSimulation()" style="margin-top: 20px;" value="Submit" actionListener="#{simulatorView.startSimulation}"/>
                        </h:panelGroup>

                        <hr/>

                        <h:panelGroup layout="block" style="padding: 20px 0;" id="submitBuySimulationSection">
                            <h3>Simulate Best Card to Buy (for you if your turn, or for opponent if their turn)</h3>

                            <h:panelGrid style="margin-top: 15px;" columns="2" columnClasses="boldText smallRightPadding tinyBottomPadding alignTop, tinyBottomPadding alignTop">

                                <h:outputText value="Number of times to simulate: "/>
                                <p:selectOneMenu value="#{simulatorView.timesToSimulateBuys}">
                                    <f:selectItem itemLabel="250" itemValue="250"/>
                                    <f:selectItem itemLabel="500" itemValue="500"/>
                                    <f:selectItem itemLabel="1000" itemValue="1000"/>
                                    <f:selectItem itemLabel="2000" itemValue="2000"/>
                                </p:selectOneMenu>

                            </h:panelGrid>

                            <p:commandButton process="submitBuySimulationSection" update="submitSection results" onsuccess="runBuySimulation()" style="margin-top: 15px;" value="Submit" actionListener="#{simulatorView.startBuySimulation}"/>
                        </h:panelGroup>

                        <hr/>

                    </h:panelGroup>

                </h:panelGroup>

            </h:panelGroup>
        </h:form>
    </ui:define>
</ui:composition>
</html>